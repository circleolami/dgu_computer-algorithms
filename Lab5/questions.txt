Q1. 
다음은 스택 기반의 수식 트리의 응용 예이다.
아래의 소스코드를 참고하여 후위표기 수식 입력 데이터를 이용해 수식 트리에 자료를 저장하고
중위 순회방식으로 트리를 순회한 결과를 출력하시오. 

Q2. 
N (10000 > N >= 100)을 입력받아 rand() 함수를 이용하여 중복되는 값이 없는 N개의 난수를 생성하세요.
생성한 N개의 데이터를 생성된 순서대로 이진 탐색트리(Binary Search Tree)에 BSTinsert()를 통해 삽입하여 이진 탐색트리 T1을 만들어라.
그리고 BSTsearch()를 통해 이진 탐색트리 T1에서 랜덤한 100개의 자료를 탐색하는데 소요된 '키의 평균 비교횟수'를 구하고, 
아래의 출력 예제와 같이 출력하는 프로그램을 작성하시오. 
(단, 평균비교횟수는 각 자료 탐색을 위한 키의 비교횟수 합계를 구한 다음에 100으로 나누어서 계산함)

Q3. 
문제 2번과 동일하게 N (10000 > N >= 100)을 입력받아 rand() 함수를 이용하여 중복되지 않는 N개의 난수를 발생시킨 후, 이를 삽입하여 이진 탐색트리 T2를 만들어라.
그리고 앞서 생성한 배열 데이터를 순서대로 10개씩 불러들인 뒤, 그 중 한 개를 랜덤하게 골라 삭제하는 프로그램을 아래의 BSTdelete() 코드를 완성하여 작성하시오. 
또한 위 방법을 통해 10개 이상의 자료들을 삭제하는데 소요된 '키의 평균 비교횟수'를 구하고, 아래의 출력 예제와 같이 출력하는 프로그램을 작성하시오. 
(단, 평균비교횟수는 각 자료 삭제를 위한 키의 비교횟수 합계를 구한 다음에 삭제한 자료수로 나누어서 계산)

Q4.
문제 2번에서 생성한 T1 트리의 자료를 inorder로 순회하면서 재배치시키고, 이를 입력으로 BSTinsert()를 다시 이용하여 새로운 이진탐색 트리 T3로 만드시오.
그리고 각각의 자료들을 탐색하는데 소요된 '키의 평균비교횟수'를 구하고 아래의 출력 예제와 같이 출력하는 프로그램을 작성하시오.
도한 T3의 평균비교횟수를 이용해 T1과 T3의 탐색 성능에 대해서 비교하여 보시오.
마지막으로 T1과 T3 중 어떤 트리가 Skewed Binary Search Tree에 가까운지 설명하시오. 