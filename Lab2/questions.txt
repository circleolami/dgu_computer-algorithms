Q1. 
정렬하려는 배열의 크기 N (>10000)을 입력 받아, 아래와 같은 두 가지 데이터 배열 A와 B를 만들고,
이 데이터 배열 A와 B 각각에 대해 insertion sort를 통해 오름차순으로 정렬시켜주는 프로그램을 작성하시오.
이때, 정렬된 결과뿐만 아니라 정렬 과정에서의 데이터비교 연산횟수와 자료이동 연산횟수 또한 아래의 입출력 예제와 같이 출력되어야 한다. 
그리고 insertion sort는 배열 A와 배열 B 중 어떤 입력을 보다 빨리 처리했는지 확인하고 그 이유를 설명해보시오. 

- 데이터 배열 A : 1부터 N까지의 숫자들이 내림차순으로 정렬된 데이터 배열
- 데이터 배열 B : 1부터 N까지의 숫자들이 랜덤하게 재배치된 데이터 배열 

Q2.
정렬하려는 배열의 크기 N (>10000)을 입력 받아, 문제 1번과 동일한 방법으로 데이터 A와 데이터 B를 생성하고, 
이 데이터 배열 A, B 각각에 대해 Shell Sort를 이용해 오름차순으로 정렬시켜주는 프로그램을 작성하시오.
이때, 정렬된 결과뿐만 아니라 정렬 과정에서의 데이터비교 연산횟수와 자료이동 연산횟수 또한 아래의 입출력 예제와 같이 출력되어야 한다.
그리고 데이터비교 연산횟수와 자료이동 연산횟수의 관점에서 1번에서 작성한 insertion sort와 그 성능을 비교해 보시오. 

- 데이터 배열 A : 1부터 N까지의 숫자들이 내림차순으로 정렬된 데이터 배열
- 데이터 배열 B : 1부터 N까지의 숫자들이 랜덤하게 재배치된 데이터 배열 

Q3.
정렬하려는 배열의 크기 N (>10000)을 입력 받아, 문제 1번과 동일한 방법으로 데이터 A와 데이터 B를 생성하고,
이 데이터 배열 A, B 각각에 대해 bubble sort를 이용해 오름차순으로 정렬시켜주는 프로그램을 작성하시오.
이때, 정렬된 결과뿐만 아니라 정렬 과정에서의 데이터비교 연산횟수와 자료이동 연산횟수 또한 아래의 입출력 예제와 같이 출력되어야 한다.
그리고 데이터비교 연산횟수와 자료이동 연산횟수의 관점에서 1번에서 작성한 insertion sort와 그 성능을 비교해 보시오.

- 데이터 배열 A : 1부터 N까지의 숫자들이 내림차순으로 정렬된 데이터 배열
- 데이터 배열 B : 1부터 N까지의 숫자들이 랜덤하게 재배치된 데이터 배열 

Q4.
N (>500)개의 물건들이 선반에 일렬로 놓여져 있다고 가정하자. 
이 물건들을 무게 기준으로 오름차순으로 정렬시킬 때 이동되는 물건들의 무게 합을 최소로 만들고자 한다.
예를 들어, 무게가 5와 3인 두 개의 물건 위치를 서로 바꾸는 경우, 무게가 가벼운 것을 먼저 내려 놓고, 무거운 것을 빈 자리로 이동시킨 뒤,
내려놓았던 가벼운 것을 다시 무거운 것이 있었던 빈 자리로 이동시키는 방법 (총 이동된 물건들의 무게 합 = 3 + 5 + 3 = 11)이
무거운 물건을 먼저 내려 놓는 방법 (총 이동된 물건들의 무게 합 = 5 + 3 + 5 = 13)에 비해 보다 효율적일 것이다.
이러한 이동 물건들의 무게 합 최소화 전략이 반영될 수 있도록 앞의 3번 문제에서 작성한 bubble sort 함수 프로그램을 수정해 작성하고, 어떻게 수정하였는지 설명하시오.

또한, N의 값을 입력 받은 뒤 insertion sort, 수정된 bubble sort, shell sort 각각에 대해 아래 입출력 예제와 같이 이동된 물건들의 무게 합을 출력해주는 프로그램을 작성하시오.
마지막으로 위 세 가지 방법들 중 어떤 정렬방법이 가장 좋은 성능을 발휘했는지를 확인하고, 그 이유를 설명해보시오.
(단, 처음 선반에 일렬로 놓여진 N개 물건들 중 i번째 물건의 무게는 N - i + 1이다.)